const enc=i=>(new TextEncoder).encode(i),dec=i=>(new TextDecoder).decode(i),i=192,cs=crypto.subtle;export const siv=e=>Array.from(crypto.getRandomValues(new Uint8Array(e))).toString();let b=salt=>new Uint8Array(salt.split(",")),iK=async pw=>await cs.importKey("raw",enc(pw),"PBKDF2",!1,["deriveKey"]),dK=async(p,salt)=>await cs.deriveKey({name:"PBKDF2",salt:b(salt),iterations:25e4,hash:"SHA-256"},await iK(p),{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),kT=async(key,s)=>s?await dK(key,s):key;export const enAES=async(key,mess,iv,s)=>{let e=[],v,m=await cs.encrypt({name:"AES-GCM",iv:b(iv)},await kT(key,s),enc(mess));for(v of new Uint8Array(m))e.push(String.fromCharCode(v+i));return e=e.join(""),e};export const deAES=async(k,enc,v,s)=>{let c=[],t;for(t of enc)c.push(t.charCodeAt(0)-i);let d=await cs.decrypt({name:"AES-GCM",iv:b(v)},await kT(k,s),new Uint8Array(c));return dec(d)};export const genECDHKeyPair=async()=>await cs.generateKey({name:"ECDH",namedCurve:"P-521"},!0,["deriveKey"]);export const deriveSecretKey=async(prK,puK)=>await cs.deriveKey({name:"ECDH",public:puK},prK,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);export const genECDSAKeyPair=async()=>await cs.generateKey({name:"ECDSA",namedCurve:"P-521"},!0,["sign","verify"]);export const signMessage=async(m,prK)=>await cs.sign({name:"ECDSA",hash:{name:"SHA-384"}},prK,enc(m));export const verifyMessage=async(m,puK,s)=>await cs.verify({name:"ECDSA",hash:{name:"SHA-384"}},puK,s,enc(m));